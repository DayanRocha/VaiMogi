/**
 * Exemplo de uso da detec√ß√£o de desvio de rota e rec√°lculo autom√°tico
 * 
 * Este arquivo demonstra como o sistema funciona:
 * 1. Detec√ß√£o autom√°tica quando o motorista sai da rota
 * 2. Rec√°lculo autom√°tico da rota usando Mapbox
 * 3. Notifica√ß√£o aos respons√°veis sobre a mudan√ßa
 * 4. Atualiza√ß√£o autom√°tica do mapa para os respons√°veis
 */

import { realTimeTrackingService } from '../services/realTimeTrackingService';
import { pushNotificationService } from '../services/pushNotificationService';

// Exemplo de configura√ß√£o do sistema
export const setupOffRouteDetection = () => {
  console.log('üöÄ Configurando detec√ß√£o de desvio de rota...');
  
  // Configurar threshold de desvio (padr√£o: 100 metros)
  realTimeTrackingService.setOffRouteThreshold(150); // 150 metros
  
  // Configurar intervalo m√≠nimo entre rec√°lculos (padr√£o: 30 segundos)
  realTimeTrackingService.setMinRecalculationInterval(45); // 45 segundos
  
  console.log('‚úÖ Sistema configurado:');
  console.log(`   - Threshold de desvio: ${realTimeTrackingService.getOffRouteThreshold()}m`);
  console.log(`   - Intervalo m√≠nimo de rec√°lculo: ${realTimeTrackingService.getMinRecalculationInterval()}s`);
};

// Exemplo de simula√ß√£o de desvio de rota
export const simulateOffRouteScenario = async () => {
  console.log('üé≠ Simulando cen√°rio de desvio de rota...');
  
  // Verificar se h√° rota ativa
  if (!realTimeTrackingService.hasActiveRoute()) {
    console.log('‚ùå Nenhuma rota ativa encontrada. Inicie uma rota primeiro.');
    return;
  }
  
  // Simular posi√ß√£o do motorista fora da rota
  const offRouteLocation = {
    lat: -23.5505 + 0.01, // Deslocamento significativo
    lng: -46.6333 + 0.01,
    timestamp: new Date().toISOString(),
    accuracy: 10,
    speed: 25 // 25 m/s (90 km/h)
  };
  
  console.log('üìç Simulando motorista fora da rota:', offRouteLocation);
  
  // Simular atualiza√ß√£o de localiza√ß√£o (para teste)
  // await realTimeTrackingService.updateDriverLocationForTest(offRouteLocation);
  
  // Verificar status ap√≥s a atualiza√ß√£o
  const status = realTimeTrackingService.getOffRouteStatus();
  console.log('üìä Status ap√≥s simula√ß√£o:', status);
  
  if (status.isOffRoute) {
    console.log(`üö® Motorista detectado fora da rota! Dist√¢ncia: ${status.distanceFromRoute || 0}m`);
    
    if (status.lastRecalculation) {
      console.log(`üîÑ Rota recalculada em: ${status.lastRecalculation}`);
    }
  }
};

// Exemplo de for√ßar rec√°lculo manual
export const forceRouteRecalculation = async () => {
  console.log('üîß For√ßando rec√°lculo manual da rota...');
  
  try {
    const success = await realTimeTrackingService.forceRouteRecalculation();
    
    if (success) {
      console.log('‚úÖ Rota recalculada com sucesso!');
    } else {
      console.log('‚ùå Falha ao recalcular rota.');
    }
  } catch (error) {
    console.error('‚ùå Erro ao for√ßar rec√°lculo:', error);
  }
};

// Exemplo de monitoramento em tempo real
export const startOffRouteMonitoring = () => {
  console.log('üëÄ Iniciando monitoramento de desvio de rota...');
  
  // Adicionar listener para atualiza√ß√µes da rota
  realTimeTrackingService.addListener((route) => {
    if (route) {
      const status = realTimeTrackingService.getOffRouteStatus();
      
      if (status.isOffRoute) {
        console.log(`üö® ALERTA: Motorista fora da rota! Dist√¢ncia: ${status.distanceFromRoute || 0}m`);
        
        // Notificar respons√°veis (isso j√° √© feito automaticamente pelo sistema)
        console.log('üì± Respons√°veis sendo notificados automaticamente...');
      } else {
        console.log('‚úÖ Motorista na rota correta');
      }
      
      // Log da localiza√ß√£o atual
      if (route.currentLocation) {
        console.log(`üìç Localiza√ß√£o atual: ${route.currentLocation.lat.toFixed(6)}, ${route.currentLocation.lng.toFixed(6)}`);
      }
      
      // Log de informa√ß√µes da rota
      if (route.mapboxRoute) {
        console.log(`üó∫Ô∏è Rota ativa: ${route.estimatedDuration || 'N/A'} min, ${route.totalDistance || 'N/A'}m`);
      }
    } else {
      console.log('‚èπÔ∏è Nenhuma rota ativa');
    }
  });
  
  console.log('‚úÖ Monitoramento iniciado. O sistema ir√° detectar automaticamente desvios de rota.');
};

// Exemplo de teste de notifica√ß√µes
export const testRouteUpdateNotification = async () => {
  console.log('üîî Testando notifica√ß√£o de atualiza√ß√£o de rota...');
  
  try {
    const success = await pushNotificationService.sendRouteUpdateNotification({
      driverName: 'Jo√£o Silva',
      reason: 'Rota recalculada devido a desvio detectado',
      newEstimatedTime: '15 minutos'
    });
    
    if (success) {
      console.log('‚úÖ Notifica√ß√£o de teste enviada com sucesso!');
    } else {
      console.log('‚ùå Falha ao enviar notifica√ß√£o de teste.');
    }
  } catch (error) {
    console.error('‚ùå Erro ao testar notifica√ß√£o:', error);
  }
};

// Exemplo completo de uso
export const runCompleteExample = async () => {
  console.log('üöÄ Executando exemplo completo de detec√ß√£o de desvio de rota...');
  console.log('=' .repeat(60));
  
  // 1. Configurar sistema
  setupOffRouteDetection();
  
  // 2. Iniciar monitoramento
  startOffRouteMonitoring();
  
  // 3. Testar notifica√ß√£o
  await testRouteUpdateNotification();
  
  // 4. Simular cen√°rio (apenas se houver rota ativa)
  if (realTimeTrackingService.hasActiveRoute()) {
    await simulateOffRouteScenario();
  } else {
    console.log('‚ÑπÔ∏è Para testar a simula√ß√£o, inicie uma rota primeiro.');
  }
  
  console.log('=' .repeat(60));
  console.log('‚úÖ Exemplo completo executado!');
  console.log('üí° O sistema agora est√° monitorando automaticamente desvios de rota.');
  console.log('üí° Quando o motorista sair da rota:');
  console.log('   1. O sistema detectar√° automaticamente');
  console.log('   2. A rota ser√° recalculada usando Mapbox');
  console.log('   3. Os respons√°veis ser√£o notificados');
  console.log('   4. O mapa ser√° atualizado automaticamente');
};

// Exportar todas as fun√ß√µes para uso
export default {
  setupOffRouteDetection,
  simulateOffRouteScenario,
  forceRouteRecalculation,
  startOffRouteMonitoring,
  testRouteUpdateNotification,
  runCompleteExample
};